ext {
    //versions
    kotlinVersion = "1.3.31"
    supportVersion = '1.0.2'
    constraintVersion = '1.1.3'
    recyclerViewVersion = "1.0.0"
    koinVersion = '2.0.1'
    designVersion = '1.1.0-alpha09'
    cardviewVersion = '1.0.0'
    coroutinesVersion = '1.3.0'
    gsonVersion = '2.8.5'
    flexboxVersion = '1.1.1'
    retrofitVersion = '2.5.0'
    retrofitGsonVersion = '2.5.0'
    okhttpVersion = '3.14.0'
    piccassoVersion = '2.71828'
    shimmerVersion = '0.5.0'

    //packages implementation 'com.facebook.shimmer:shimmer:0.5.0'
    supportPackage = 'androidx'
    koinPackage = 'org.koin'
    kotlinPackage = 'org.jetbrains.kotlin'
    designPackage = 'com.google.android.material'
    coroutinesPackage = 'org.jetbrains.kotlinx'
    gsonPackage = 'com.google.code.gson'
    flexboxPackage = 'com.google.android'
    okhttpPackage = 'com.squareup.okhttp3'
    retrofitPackage = 'com.squareup.retrofit2'
    piccassoPackage = 'com.squareup.picasso'
    shimmerPackage = 'com.facebook.shimmer'

    //Android
    androidConfig = [
            androidBuildToolsVersion        : "28.0.0",
            androidMinSdkVersion            : 21,
            androidTargetSdkVersion         : 29,
            androidCompileSdkVersion        : 29,
            androidapplicationId            : 'pe.solera.romerogroupapp',
            androidVersionCode              : 1,
            androidVersionName              : "1.0.0",
            androidTestInstrumentationRunner: "androidx.test.runner.AndroidJUnitRunner",
            kotlinVersion                   : kotlinVersion
    ]

    presentationDependencies = [
            appcompat   : buildDependency(addPackage(supportPackage, 'appcompat'), 'appcompat', supportVersion),
            constraint  : buildDependency(addPackage(supportPackage, 'constraintlayout'), 'constraintlayout', constraintVersion),
            recyclerView: buildDependency(addPackage(supportPackage, 'recyclerview'), 'recyclerview', recyclerViewVersion),
            cardView    : buildDependency(addPackage(supportPackage, 'cardview'), 'cardview', cardviewVersion),
            core        : buildDependency(addPackage(supportPackage, 'core'), 'core-ktx', supportVersion),
            koin        : buildDependency(koinPackage, 'koin-androidx-viewmodel', koinVersion),
            kotlin      : buildDependency(kotlinPackage, 'kotlin-stdlib-jdk7', kotlinVersion),
            design      : buildDependency(designPackage, 'material', designVersion),
            coroutines  : buildDependency(coroutinesPackage, 'kotlinx-coroutines-core', coroutinesVersion),
            flexbox     : buildDependency(flexboxPackage, 'flexbox', flexboxVersion),
            gson        : buildDependency(gsonPackage, 'gson', gsonVersion),
            piccasso       : buildDependency(piccassoPackage, 'picasso', piccassoVersion),
            shimmer       : buildDependency(shimmerPackage, 'shimmer', shimmerVersion),
    ]

    repositoryDependencies = [
            core  : buildDependency(addPackage(supportPackage, 'core'), 'core-ktx', supportVersion),
            koin  : buildDependency(koinPackage, 'koin-androidx-viewmodel', koinVersion),
            kotlin: buildDependency(kotlinPackage, 'kotlin-stdlib-jdk7', kotlinVersion),
            gson: buildDependency(gsonPackage, 'gson', gsonVersion),
            retrofit        : buildDependency(retrofitPackage, 'retrofit', retrofitVersion),
            retrofitAdapter : buildDependency(retrofitPackage, 'adapter-rxjava', retrofitVersion),
            retrofitGson    : buildDependency(retrofitPackage, 'converter-gson', retrofitGsonVersion),
            okhttp :buildDependency(okhttpPackage, 'logging-interceptor', okhttpVersion),
    ]

    useCaseDependencies = [
            core      : buildDependency(addPackage(supportPackage, 'core'), 'core-ktx', supportVersion),
            koin      : buildDependency(koinPackage, 'koin-androidx-viewmodel', koinVersion),
            kotlin    : buildDependency(kotlinPackage, 'kotlin-stdlib-jdk7', kotlinVersion),
            coroutines: buildDependency(coroutinesPackage, 'kotlinx-coroutines-core', coroutinesVersion),
            gson: buildDependency(gsonPackage, 'gson', gsonVersion),

    ]

}

static String buildDependency(String pack, String dependency, String version) {
    return "${pack}:${dependency}:${version}"
}

static String addPackage(String pack, String add) {
    return "${pack}.${add}"
}